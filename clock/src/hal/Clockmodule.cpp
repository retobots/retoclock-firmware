#include "hal/Clockmodule.h"
#include <Wire.h>
#include <Arduino.h>
#include <WiFi.h>
#include <time.h>

// Th√¥ng tin WiFi c·ªßa b·∫°n
const char* ssid     = "Retobots";
const char* password = "retobot@2025";

// NTP config
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 7 * 3600; // GMT+7
const int daylightOffset_sec = 0;

Clockmodule::Clockmodule() {}

void Clockmodule::begin() {
    Wire.begin();

    if (!rtc.begin()) {
        Serial.println("‚ùå Kh√¥ng t√¨m th·∫•y module DS3231!");
        while (1);
    }

    if (rtc.lostPower()) {
        Serial.println("‚ö†Ô∏è DS3231 b·ªã m·∫•t ngu·ªìn, c·∫ßn c·∫≠p nh·∫≠t l·∫°i th·ªùi gian.");
    }

    if (syncWithNTP()) {
        Serial.println("‚úÖ C·∫≠p nh·∫≠t th·ªùi gian t·ª´ NTP th√†nh c√¥ng.");
    } else {
        Serial.println("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th·ªùi gian t·ª´ NTP.");
    }
}

bool Clockmodule::lostPower() {
    return rtc.lostPower();
}

DateTime Clockmodule::getTime() {
    return rtc.now();
}

bool Clockmodule::syncWithNTP() {
    // B·∫Øt ƒë·∫ßu k·∫øt n·ªëi WiFi
    WiFi.begin(ssid, password);
    Serial.print("üîå ƒêang k·∫øt n·ªëi WiFi: ");
    Serial.println(ssid);

    int retry = 0;
    while (WiFi.status() != WL_CONNECTED && retry < 20) {
        delay(500);
        Serial.print(".");
        retry++;
    }
    Serial.println();

    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WiFi");
        Serial.print("WiFi Status: ");
        Serial.println(WiFi.status());
        return false;
    }

    Serial.println("‚úÖ ƒê√£ k·∫øt n·ªëi WiFi");
    Serial.print("IP: ");
    Serial.println(WiFi.localIP());

    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
    struct tm timeinfo;
    delay(1500);  // ch·ªù NTP response v·ªÅ

    if (!getLocalTime(&timeinfo)) {
        Serial.println("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th·ªùi gian t·ª´ NTP");
        return false;
    }

    // In th·ªùi gian t·ª´ NTP ra Serial ƒë·ªÉ ki·ªÉm tra
    Serial.printf("üïí NTP time: %04d-%02d-%02d %02d:%02d:%02d\n",
                  timeinfo.tm_year + 1900, timeinfo.tm_mon + 1, timeinfo.tm_mday,
                  timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);

    rtc.adjust(DateTime(
        timeinfo.tm_year + 1900,
        timeinfo.tm_mon + 1,
        timeinfo.tm_mday,
        timeinfo.tm_hour,
        timeinfo.tm_min,
        timeinfo.tm_sec
    ));

    // Ng·∫Øt WiFi n·∫øu kh√¥ng d√πng n·ªØa
    WiFi.disconnect(true);
    WiFi.mode(WIFI_OFF);
    return true;
}
